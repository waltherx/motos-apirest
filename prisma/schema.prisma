generator client {
  provider = "prisma-client-js"
}

model Position {
  id             Int         @id @default(autoincrement())
  date           DateTime    @default(now())
  latitude       Decimal     @db.Decimal(9, 6)
  longitude      Decimal     @db.Decimal(9, 6)
  timestamp      Int?
  speed          Decimal?    @db.Decimal(8, 6)
  batt           Decimal?    @db.Decimal(8, 6)
  dispositivo    Dispositivo @relation(fields: [dispositivo_id], references: [id])
  dispositivo_id Int
}

model TypeAlarma {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  alarmas      Alarma[]
  Typegeofence Typegeofence[]
  Typeparked   Typeparked[]
}

model Alarma {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre        String       @db.VarChar(40)
  created_at    DateTime     @default(now())
  update_at     DateTime?    @updatedAt
  devices       String[]
  estado        EstadoAlarma @default(DESACTIVADA)
  typealarma_id String       @db.Uuid
  typealarma    TypeAlarma   @relation(fields: [typealarma_id], references: [id])
  users         UserAlarma[]
}

model UserAlarma {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inicio     DateTime? @db.Time()
  fin        DateTime? @db.Time()
  isTemp     Boolean   @default(false)
  emails     String[]
  discord    Boolean   @default(false)
  telegram   Boolean   @default(false)
  alarma     Alarma?   @relation(fields: [alarma_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])
  alarma_id  String?   @db.Uuid
  user_id    String?   @db.Uuid
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt

  @@index([alarma_id, user_id])
}

model Sucrusal {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre    String  @db.VarChar(120)
  direccion String  @db.VarChar(250)
  latitude  Decimal @db.Decimal(9, 6)
  longitude Decimal @db.Decimal(9, 6)
  motos     Moto[]
}

model Geofence {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre         String       @db.VarChar(120)
  tipo           Typegeofence @relation(fields: [typegeofenceId], references: [id])
  created_at     DateTime     @default(now())
  update_at      DateTime?    @updatedAt
  typegeofenceId String       @db.Uuid
  Polygon        Polygon[]
}

model Typegeofence {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  in_out        Boolean    @default(false)
  isBoth        Boolean    @default(false)
  typealarma_id String     @db.Uuid
  typealarma    TypeAlarma @relation(fields: [typealarma_id], references: [id])
  Geofence      Geofence[]
}

model Typeparked {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  limit_minutes Int        @default(0)
  typealarma_id String     @db.Uuid
  typealarma    TypeAlarma @relation(fields: [typealarma_id], references: [id])
}

model Location {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  latitude   Decimal @db.Decimal(9, 6)
  longitude  Decimal @db.Decimal(9, 6)
  polygon_id String  @db.Uuid
  poligon    Polygon @relation(fields: [polygon_id], references: [id])
}

model Polygon {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  typegeo_id String     @db.Uuid
  typegeo    Geofence   @relation(fields: [typegeo_id], references: [id])
  puntos     Location[]
  Circle     Circle[]
}

model Circle {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  radius     Int
  latitude   Decimal @db.Decimal(9, 6)
  longitude  Decimal @db.Decimal(9, 6)
  polygon_id String  @db.Uuid
  poligon    Polygon @relation(fields: [polygon_id], references: [id])
}

model Client {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ci         Int       @unique
  fullname   String    @db.VarChar(350)
  address    String?   @default("") @db.VarChar(250)
  phone      String?   @default("") @db.VarChar(20)
  motos      Moto[]
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
  user       User?     @relation(fields: [user_id], references: [id])
  user_id    String?   @unique @db.Uuid
}

model Moto {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  marca         String?     @default("") @db.VarChar(100)
  modelo        String      @db.VarChar(100)
  anio          Int?        @default(0)
  placa         String      @db.VarChar(15)
  motor         String?     @default("") @db.VarChar(10)
  color         String?     @default("") @db.VarChar(10)
  peso          Decimal?    @default(0) @db.Decimal(10, 2)
  kilometraje   Decimal?    @default(0) @db.Decimal(10, 2)
  estado        String?     @default("") @db.VarChar(50)
  fecha_compra  DateTime?
  precio_compra Decimal?    @default(0) @db.Decimal(10, 2)
  created_at    DateTime    @default(now())
  update_at     DateTime?   @updatedAt
  client        Client      @relation(fields: [client_id], references: [id])
  client_id     String      @db.Uuid
  sucrusal_id   String?     @db.Uuid
  sucrusal      Sucrusal?   @relation(fields: [sucrusal_id], references: [id])
  dispositivos  MotoDispo[]
}

model MotoDispo {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  moto           Moto?        @relation(fields: [moto_id], references: [id])
  dispositivo    Dispositivo? @relation(fields: [dispositivo_id], references: [id])
  moto_id        String?      @db.Uuid
  dispositivo_id Int?
  created_at     DateTime     @default(now())
  update_at      DateTime?    @updatedAt

  @@index([moto_id, dispositivo_id])
}

model Dispositivo {
  id         Int          @id @default(autoincrement())
  serial     String
  chipgsm    String       @db.VarChar(20)
  megas      DateTime?
  estado     EstadoDevice @default(DISPONIBLE)
  created_at DateTime     @default(now())
  update_at  DateTime?    @updatedAt
  positions  Position[]
  motos      MotoDispo[]
}

model Role {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre      String  @unique @db.VarChar(20)
  descripcion String? @default("")
  users       User[]
}

model User {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String       @unique
  password   String       @db.VarChar(2000)
  email      String       @unique
  avatar     String?      @default("") @db.VarChar(30)
  isAdmin    Boolean      @default(false)
  status     EstadoUser   @default(ACTIVO)
  created_at DateTime     @default(now())
  update_at  DateTime?    @updatedAt
  role       Role         @relation(fields: [role_id], references: [id])
  role_id    String       @db.Uuid
  cliente    Client?
  alarmas    UserAlarma[]
}

enum EstadoUser {
  ACTIVO
  INACTIVO
  BLOQUEADO
  PENDIENTE
  ELIMINADO
}

enum EstadoDevice {
  DISPONIBLE
  ENUSO
  MANTENIMIENTO
}

enum EstadoAlarma {
  ACTIVADA
  DESACTIVADA
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_LOCAL")
}
