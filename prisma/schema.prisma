generator client {
  provider = "prisma-client-js"
}

model Position {
  id             Int         @id @default(autoincrement())
  date           DateTime    @default(now())
  latitude       Decimal     @db.Decimal(9, 6)
  longitude      Decimal     @db.Decimal(9, 6)
  timestamp      Int?
  speed          Decimal?    @db.Decimal(8, 6)
  batt           Decimal?    @db.Decimal(8, 6)
  dispositivo    Dispositivo @relation(fields: [dispositivo_id], references: [id])
  dispositivo_id Int
}

model Alarma {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre      String       @db.VarChar(40)
  inicio      DateTime?    @db.Time()
  fin         DateTime?    @db.Time()
  isTemp      Boolean      @default(false)
  estado      EstadoAlarma @default(DESACTIVADA)
  sucrusal_id String       @db.Uuid
  sucrusal    Sucrusal     @relation(fields: [sucrusal_id], references: [id])
  created_at  DateTime     @default(now())
  update_at   DateTime?    @updatedAt
  Geofence    Geofence[]
}

model Sucrusal {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre    String   @db.VarChar(120)
  direccion String   @db.VarChar(250)
  latitude  Decimal  @db.Decimal(9, 6)
  longitude Decimal  @db.Decimal(9, 6)
  radio     Int?     @default(10)
  motos     Moto[]
  Alarma    Alarma[]
  User      User[]
}

model Geofence {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre         String    @db.VarChar(120)
  tipo           String
  created_at     DateTime  @default(now())
  update_at      DateTime? @updatedAt
  typegeofenceId String    @db.Uuid
  Polygon        Polygon[]
  alarm_id       String    @db.Uuid
  alarm          Alarma    @relation(fields: [alarm_id], references: [id])
}

model Location {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  latitude   Decimal @db.Decimal(9, 6)
  longitude  Decimal @db.Decimal(9, 6)
  polygon_id String  @db.Uuid
  poligon    Polygon @relation(fields: [polygon_id], references: [id])
}

model Polygon {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  typegeo_id String     @db.Uuid
  typegeo    Geofence   @relation(fields: [typegeo_id], references: [id])
  puntos     Location[]
  Circle     Circle[]
}

model Circle {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  radius     Int
  latitude   Decimal @db.Decimal(9, 6)
  longitude  Decimal @db.Decimal(9, 6)
  polygon_id String  @db.Uuid
  poligon    Polygon @relation(fields: [polygon_id], references: [id])
}

model Client {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ci         String    @unique @db.VarChar(12)
  fullname   String    @db.VarChar(350)
  address    String?   @default("") @db.VarChar(250)
  phone      String?   @default("") @db.VarChar(20)
  motos      Moto[]
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
}

model Moto {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  modelo       String      @db.VarChar(150)
  marca        Marca?      @default(Honda)
  placa        String      @unique @db.VarChar(12)
  descripcion  String?     @default("") @db.VarChar(450)
  litrokm      Decimal?    @default(0) @db.Decimal(10, 2)
  estado       MotoEstado  @default(SN)
  created_at   DateTime    @default(now())
  update_at    DateTime?   @updatedAt
  client       Client      @relation(fields: [client_id], references: [id])
  client_id    String      @db.Uuid
  sucrusal_id  String?     @db.Uuid
  sucrusal     Sucrusal?   @relation(fields: [sucrusal_id], references: [id])
  dispositivos MotoDispo[]
}

model MotoDispo {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  moto           Moto?        @relation(fields: [moto_id], references: [id])
  dispositivo    Dispositivo? @relation(fields: [dispositivo_id], references: [id])
  moto_id        String?      @db.Uuid
  dispositivo_id Int?
  created_at     DateTime     @default(now())
  update_at      DateTime?    @updatedAt

  @@index([moto_id, dispositivo_id])
}

model Dispositivo {
  id         Int          @id @default(autoincrement())
  serial     String       @unique @db.VarChar(100)
  chipgsm    String       @unique @db.VarChar(20)
  megas_fin  DateTime?
  estado     EstadoDevice @default(Disponible)
  created_at DateTime     @default(now())
  update_at  DateTime?    @updatedAt
  positions  Position[]
  motos      MotoDispo[]
}

model Role {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre      String  @unique @db.VarChar(20)
  descripcion String? @default("")
  users       User[]
}

model TokenHeader {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String   @unique
  created_at DateTime @default(now())
}

model User {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String     @unique
  password    String     @db.VarChar(2000)
  email       String     @unique
  avatar      String?    @default("") @db.VarChar(30)
  isAdmin     Boolean    @default(false)
  status      EstadoUser @default(ACTIVO)
  created_at  DateTime   @default(now())
  update_at   DateTime?  @updatedAt
  role        Role       @relation(fields: [role_id], references: [id])
  role_id     String     @db.Uuid
  sucrusal    Sucrusal?  @relation(fields: [sucrusal_id], references: [id])
  sucrusal_id String?    @db.Uuid
}

enum EstadoUser {
  ACTIVO
  INACTIVO
  BLOQUEADO
  PENDIENTE
  ELIMINADO
}

enum MotoEstado {
  Nueva
  SemiNueva
  Particular
  Trabajo
  Mantenimiento
  SN
}

enum EstadoDevice {
  Disponible
  Monitoreo
  Mantenimiento
}

enum Marca {
  Honda
  Hero
  KTM
  Vespa
  Atul
}

enum EstadoAlarma {
  ACTIVADA
  DESACTIVADA
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_LOCAL")
}
